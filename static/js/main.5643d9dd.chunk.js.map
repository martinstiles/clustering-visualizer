{"version":3,"sources":["views/header.js","algorithms/utils.js","views/clustering/point.js","views/buttonGroup/modal.js","views/buttonGroup/moreMenu.js","views/buttonGroup/buttonGroup.js","views/clustering/initialPoints.js","algorithms/kMeans.js","views/clustering/table.js","App.js","index.js"],"names":["Header","style","marginBottom","fontSize","color","isInteger","str","test","getRandomInt","max","Math","floor","random","getEuclidianDistance","u","v","sqrt","rowIndex","colIndex","getCopyOfCentroids","centroids","copyOfCentroids","forEach","centroid","push","id","compareCentroids","prevCentroids","isEqual","hasOneEqual","prevCentroid","getAverageOfCluster","cluster","rowIndexSum","colIndexSum","point","length","typeToColorMap","marked","normal","unmarked","Point","props","useState","type","setType","runState","hooks","updateType","newType","setTypeInPoint","coordinates","height","width","border","backgroundColor","borderRadius","key","className","onMouseDown","setRunState","modal","display","alignItems","justifyContent","paper","textAlign","padding","TransitionsModal","visited","localStorage","getItem","open","setOpen","handleClose","setItem","Button","margin","onClick","Modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","fontStyle","MoreMenu","anchorEl","setAnchorEl","handleMoreClose","marginTop","aria-haspopup","event","currentTarget","Menu","keepMounted","Boolean","MenuItem","Link","target","href","ButtonGroup","selectStyle","minWidth","isEmpty","isCustomized","isRunning","isFinished","algorithm","setAlgorithm","speed","setSpeed","k","setK","flexDirection","FormControl","variant","InputLabel","Select","value","onChange","label","autoWidth","marginLeft","ariant","disabled","runAlgorithm","resetPoints","resetAlgorithm","getInitialPoints","points","row","currentRow","col","prevType","KMeans","table","setIterations","setVariance","changeHook","setChangeHook","changedNodesInOrder","iterations","map","getMarkedPoints","i","getCentroids","centroidsAreChanging","c","closestCentroid","undefined","distanceToClosestCentroid","Infinity","currentDistance","newCoordinates","Number","isNaN","wasMarked","p","variance","console","log","round","speedLabelToSpeedMap","slow","medium","fast","instant","Table","setTable","useEffect","initialPoints","useCallback","labelToAlgorithm","useMemo","kMeans","currentAlgorithm","Algorithm","currentSpeed","isOrWasMarked","generatePoints","numOfPoins","randomPoints","App","marginRight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5643d9dd.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <div style={{marginBottom: '2em'}}>\n      <h1 style={{fontSize: '3.5em', color: `rgb(${[240,240,240]})`}}> Clustering Visualizer </h1>\n    </div>\n  )\n}\n\nexport default Header\n","export const isInteger = (str) => /^\\d+$/.test(str)\n\nexport const getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n// getRandomCentroids\nexport const getCentroids = (k) => {\n  const centroids = []\n  for(let i = 0; i < k; i++) {\n    centroids.push(\n      {\n        id: `${i}`,\n        rowIndex: getRandomInt(22),\n        colIndex: getRandomInt(40),\n        cluster: [],\n      }\n    )\n    // IDEA: Check if there are a certain distance between the centroids, and if not, try again (?)\n  }\n  return centroids\n}\n\nexport const getUniformCentroids = (k) => {\n  const numRows = 22\n  const numCols = 40\n  const tableSize = numRows * numCols\n  const interval = Math.floor(tableSize / (k + 1))\n\n  const centroids = []\n  for(let i = 0; i < k; i++) {\n    const currentSize = interval * (i + 1)\n    centroids.push(\n      {\n        id: `${i}`,\n        rowIndex: Math.floor(currentSize / numCols),\n        colIndex: Math.floor(currentSize / numRows),\n        cluster: [],\n      }\n    )\n  }\n  return centroids\n}\n\nexport const getEuclidianDistance = (u, v) => {\n  return Math.sqrt((u.rowIndex - v.rowIndex)**2 + (u.colIndex - v.colIndex)**2)\n}\n\nexport const getHelperTable = (table) => {\n  const helperNodes = []\n  table.map((row) => {\n    const helperRow = []\n    row.map((point) => {\n        helperRow.push(\n          {\n            type: point.type,\n            rowIndex: point.rowIndex,\n            colIndex: point.colIndex,\n            color: point.color,\n            closestCentroid: undefined,\n          }\n        )\n    })\n    helperNodes.push(helperRow)\n  })\n  return helperNodes\n}\n\nexport const getCopyOfCentroids = (centroids) => {\n  const copyOfCentroids = []\n  centroids.forEach((centroid) => {\n    copyOfCentroids.push({\n      rowIndex: centroid.rowIndex,\n      colIndex: centroid.colIndex,\n      id: centroid.id,\n    })\n  })\n  return copyOfCentroids\n}\n\n// Returns true if they are equal\nexport const compareCentroids = (centroids, prevCentroids) => {\n  var isEqual = true\n  centroids.forEach((centroid) => {\n    var hasOneEqual = false\n    prevCentroids.forEach((prevCentroid) => {\n      if (centroid.rowIndex === prevCentroid.rowIndex && centroid.colIndex === prevCentroid.colIndex){\n        hasOneEqual = true\n      }\n    })\n    if (!hasOneEqual) isEqual = false\n  })\n  return isEqual\n}\n\nexport const getMarkedPoints = (table) => {\n  const points = []\n  table.map((row) => {\n    row.map((point) => {\n      if (point.type === 'marked') points.push({rowIndex: point.rowIndex, colIndex: point.colIndex})\n    })\n  })\n  return points\n}\n\nexport const getAverageOfCluster = (cluster) => {\n  var rowIndexSum = 0\n  var colIndexSum = 0\n  cluster.forEach((point) => {rowIndexSum = rowIndexSum + point.rowIndex})\n  cluster.forEach((point) => {colIndexSum = colIndexSum + point.colIndex})\n  const rowIndex = Math.floor(rowIndexSum / cluster.length)\n  const colIndex = Math.floor(colIndexSum / cluster.length)\n  return {rowIndex, colIndex}\n}\n\n\n\nexport const getArrow = (coordinates) => {\n  //\n}\n\nexport const getNeighboors = (nodes, node) => {\n  const neighboors = []\n  const row = node.rowIndex\n  const col = node.colIndex\n\n  // UP\n  if (row > 0) {\n    const upNode = nodes[row - 1][col]\n    if (upNode.type === 'unvisited' || upNode.type === 'goal') {\n      neighboors.push(upNode) \n    }\n  }\n  // RIGHT 49\n  if (col < 20) {\n    const rightNode = nodes[row][col + 1]\n    if (rightNode.type === 'unvisited' || rightNode.type === 'goal') {\n      neighboors.push(rightNode) \n    }\n  }\n  // DOWN\n  if (row < 10) {\n    const downNode = nodes[row + 1][col]\n    if (downNode.type === 'unvisited' || downNode.type === 'goal') {\n      neighboors.push(downNode) \n    }\n  }\n  // LEFT\n  if (col > 0) {\n    const leftNode = nodes[row][col - 1]\n    if (leftNode.type === 'unvisited' || leftNode.type === 'goal') {\n      neighboors.push(leftNode) \n    }\n  }\n\n  return neighboors\n}\n","import React, {useState} from 'react'\nimport { isInteger } from '../../algorithms/utils'\nimport './animations.css'\n\nconst typeToColorMap = {\n  // source: '#63C132',\n  // goal: '#cf2e2e',\n  //visited: '#2d749a',\n  //shortestPath: '#ffff60',\n  marked: `rgb(${[220,220,220]})`,\n  normal: '',\n  unmarked: '',\n  centroid: '#cf2e2e',\n  // Update these colors pls -> color palette :D\n  '0': '#e3afbc', // pink\n  '1': '#3feee6', // blue\n  '2': '#cf2e2e', // red\n  '3': '#ffe400', // yellow\n  '4': '#e98074', // purple\n  '5': '#308580', // green\n  '6': '#daad86', // brown\n  '7': '#ff652f', // orange\n}\n\nconst Point = (props) => {\n  const [type, setType] = useState(props.type)\n  const [color, setColor] = useState(props.color)\n  const runState = props.hooks.runState\n\n  const updateType = (newType) => {\n    setType(newType)\n    props.setTypeInPoint(newType, props.coordinates)\n  }\n\n  const style = {\n    height: '1.5em',\n    width: '1.5em',\n    border: `1px solid rgb(${[60,60,60]})`,\n    backgroundColor: typeToColorMap[props.color || type],\n    ...(isInteger(type) && {borderRadius: '50%'}) // if it is a number, aka centroid\n  }\n\n  const onMouseDown = () => {\n    if ( runState !== 'empty' && runState !== 'customized' ) return\n    if ( type === 'marked' ) {\n      updateType('unmarked')\n      return\n    }\n    updateType('marked')\n    props.hooks.setRunState('customized')\n  }\n\n  return (\n    <div key={props.key} className={type === 'marked' || isInteger(type) ? 'marked-point' : type === 'unmarked' ? 'unmarked-point' : ''} style={style} onMouseDown={onMouseDown}/>\n  )\n}\n\nexport default Point","import React, {useState} from 'react'\nimport Modal from '@material-ui/core/Modal'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport Fade from '@material-ui/core/Fade'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { Button } from '@material-ui/core'\n\nconst modal = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}\nconst paper = {\n  backgroundColor: `rgb(${[40,40,40]})`,\n  border: `2px solid rgb(${[220,220,220]})`,\n  textAlign: 'left',\n  padding: '1em',\n}\n\nconst TransitionsModal = () => {\n\n  const visited = localStorage.getItem('visited')\n  const [open, setOpen] = useState(visited ? false : true)\n\n  const handleOpen = () => {\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n    localStorage.setItem('visited', true)\n  }\n\n  return (\n    <div>\n      <Button style={{fontSize: '0.9em', color: 'white', margin: 0 }} onClick={handleOpen}>\n        <HelpIcon style={{fontSize: '0.9em'}} />\n      </Button>\n      <Modal\n        style={modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div style={paper}>\n            <div style={{textAlign: 'center'}}>\n              <h2> Welcome to my Clustering Visualizer </h2>\n            </div>\n            <div style={{textAlign: 'center', fontStyle: 'italic'}}>\n              <h3> - Definitely under development - </h3>\n            </div>\n            <p> 1. Click inside the grid to make points for the clustering algorithm </p>\n            <p> 2. Clicking the same cell twice will remove the point </p>\n            <p> 3. Select algorithm of choice (currently only one) </p>\n            <p> 4. Select a different speed if you feel like it (currently only instant) </p>\n            <p> 5. Hit play :)  </p>\n            <div style={{textAlign: 'center'}}>\n              <Button\n                style={{color: `rgb(${[20,20,20]})`, backgroundColor: `rgb(${[220,220,220]})`, fontSize: '0.9em'}}\n                onClick={handleClose}>\n                Let me play already\n              </Button>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n\nexport default TransitionsModal","import React, { useState } from 'react'\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline'\nimport { Button, MenuItem, Menu, Link } from '@material-ui/core'\n\nconst MoreMenu = () => {\n  const [anchorEl, setAnchorEl] = useState(null)\n  const handleMoreClose = () => { setAnchorEl(null) }\n  const handleMoreClick = (event) => { setAnchorEl(event.currentTarget) }\n\n  return (\n    <>\n      <Button style={{fontSize: '1em', color: 'white', margin: 0, marginTop: '6px'}} aria-haspopup=\"true\" onClick={handleMoreClick}>\n          <ViewHeadlineIcon style={{fontSize: '0.9em'}} />\n        </Button>\n        <Menu anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleMoreClose}>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://martinstiles.github.io/pathfinding-visualizer/' style={{color: 'black'}}>\n            Pathfinding Algorithms\n          </Link></MenuItem>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://github.com/martinstiles/clustering-visualizer' style={{color: 'black'}}>\n            Go to repository\n          </Link></MenuItem>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://martinstiles.github.io/website/' style={{color: 'black'}}>\n            Visit my website\n          </Link></MenuItem>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://www.youtube.com/watch?v=dQw4w9WgXcQ' style={{color: 'black'}}>\n            Free stuff\n          </Link></MenuItem>\n        </Menu>\n    </>\n  )\n}\n\nexport default MoreMenu\n","import React, { useState } from 'react'\nimport { Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport ReplayIcon from '@material-ui/icons/Replay'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport TransitionModal from './modal.js'\nimport MoreMenu from './moreMenu.js'\n\nconst ButtonGroup = (props) => {\n  const style = {\n    marginBottom: '2em',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n\n  const selectStyle = {\n    backgroundColor: '#FFE19C',\n    minWidth: '10em',\n    textAlign: 'left'\n  }\n  const selectKStyle = {\n    backgroundColor: '#FFE19C',\n    minWidth: '6em',\n    textAlign: 'left'\n  }\n\n  // run states:\n  const isEmpty = props.runState === 'empty'\n  const isCustomized = props.runState === 'customized'\n  const isRunning = props.runState === 'running'\n  const isFinished = props.runState === 'finished'\n\n  // ALGORITHM SELECT\n  const [algorithm, setAlgorithm] = useState('')\n  const handleAlgorithmChange = (event) => {\n    setAlgorithm(event.target.value)\n  }\n\n  // SPEED SELECT\n  const [speed, setSpeed] = useState('instant') // medium\n  const handleSpeedChange = (event) => {\n    setSpeed(event.target.value)\n    props.setSpeed(event.target.value)\n  }\n\n  // PLAY BUTTON\n  const handlePlayClick = () => {\n    props.runAlgorithm(algorithm, k)\n  }\n\n  // Select K\n  const [k, setK] = useState(3)\n  const handleKChange = (event) => {\n    setK(event.target.value)\n  }\n\n  // <MenuItem value={'slow'}>Slow</MenuItem>\n  //         <MenuItem value={'medium'}>Medium</MenuItem>\n  //         <MenuItem value={'fast'}>Fast</MenuItem>\n\n  return (\n    <div style={style}>\n      <div style={{display: 'flex', flexDirection: 'row'}}>\n      <FormControl variant=\"filled\">\n        <InputLabel>\n          <div style={{color: 'black', fontStyle: 'italic'}}>Select algorithm</div>\n        </InputLabel>\n        <Select style={selectStyle} value={algorithm} onChange={handleAlgorithmChange} label=\"Algorithm\" autoWidth={true}>\n          <MenuItem value={'kMeans'}>K-Means</MenuItem>\n        </Select>\n      </FormControl>\n\n      { algorithm === 'kMeans' &&\n      <FormControl variant=\"filled\" style={{marginLeft: '1em'}}>\n        <InputLabel>\n          <div style={{color: 'black', fontStyle: 'italic'}}>Select K</div>\n        </InputLabel>\n        <Select style={selectKStyle} value={k} onChange={handleKChange} label=\"Algorithm\" autoWidth={true}>\n          <MenuItem value={1}>1</MenuItem>\n          <MenuItem value={2}>2</MenuItem>\n          <MenuItem value={3}>3</MenuItem>\n          <MenuItem value={4}>4</MenuItem>\n          <MenuItem value={5}>5</MenuItem>\n          <MenuItem value={6}>6</MenuItem>\n          <MenuItem value={7}>7</MenuItem>\n        </Select>\n      </FormControl>\n      }\n\n      <FormControl variant=\"filled\" style={{marginLeft: '2em'}}>\n        <InputLabel>\n          <div style={{color: 'black', fontStyle: 'italic'}}>Speed</div>\n        </InputLabel>\n        <Select style={selectStyle} value={speed} onChange={handleSpeedChange} label=\"Speed\" autoWidth={true}>\n          <MenuItem value={'instant'}>Instant</MenuItem>\n        </Select>\n      </FormControl>\n\n      <Button\n        style={{marginLeft: '2em', color: 'black', backgroundColor: algorithm === '' || isRunning || isFinished ? 'gray' : '#63C132'}} \n        ariant=\"contained\"\n        disabled={algorithm === '' || isRunning || isFinished}\n        onClick={handlePlayClick}\n      >\n        <PlayArrowIcon />\n      </Button>\n\n      <Button\n        style={{marginLeft: '1em', color: 'black', backgroundColor: isEmpty || isRunning ? 'gray' : '#cf2e2e'}}\n        variant=\"contained\"\n        disabled={isEmpty || isRunning}\n        onClick={isCustomized ? props.resetPoints : props.resetAlgorithm}\n      >\n        { isEmpty || isCustomized ? <HighlightOffIcon /> : <ReplayIcon /> }\n      </Button>\n      </div>\n\n      {/* <Button\n        style={{marginLeft: '1em', color: 'black', backgroundColor: true ? 'gray' : '#cf2e2e'}} // true -> !isEmpty\n        variant=\"contained\"\n        disabled={true} // true -> !isEmpty\n        onClick={props.generatePoints}\n      >\n        { 'Generate Points '}\n      </Button> */}\n\n      <div style={{display: 'flex', flexDirection: 'row', fontSize: '2.65em'}}>\n        <TransitionModal />\n        <MoreMenu />\n      </div>\n    </div>\n  )\n}\n\n\n//<MenuItem value={'aStar'}>A*</MenuItem>\n//<MenuItem value={'bestFist'}>Best first (greedy)</MenuItem>\n//<MenuItem value={'breadthFirst'}>Breadth First</MenuItem>\n\nexport default ButtonGroup","const getInitialPoints = () => {\n  const numRows = 22 // 18\n  const numCols = 40 // 34\n  const points = []\n  // Initialize the points\n  for (let row = 0; row < numRows; row++) {\n    const currentRow = []\n    for (let col = 0; col < numCols; col++) {\n      currentRow.push(\n        { type: 'normal',\n          rowIndex: row,\n          colIndex: col,\n          color: '',\n          prevType: ''\n          // closestCentroid: undefined,\n        }\n      )\n    }\n    points.push(currentRow)\n  }\n  return points\n}\n\nexport default getInitialPoints","import { getCentroids, getHelperTable , getMarkedPoints, getUniformCentroids, getEuclidianDistance, getAverageOfCluster, getCopyOfCentroids, compareCentroids } from './utils.js'\nimport { visualize } from './visualize'\n\nexport const KMeans = (k, table, speed, setRunState, setIterations, setVariance, changeHook, setChangeHook) => {\n  // ChangedNodesInOrder contains every update to visualize\n  // For elem in changedNodesInOrder:\n  // 1. [{id: \"0\", rowIndex: 19, colIndex: 9, cluster: Array(0)}, {...}] --> Update all centroids and remove previous ones --> if elem.length > 1\n  // 2. [{rowIndex: 2, colIndex: 4, closestCentroid: {…}, color: \"0\"}] --> const point = table[rowIndex][colIndex] --> \n  // 3. 'iterate' --> add iteration --> elem === 'iterate'\n  // 4. \n  const changedNodesInOrder = []\n  // const helperTable = getHelperTable(table)\n  var iterations = 0\n\n  const points = getMarkedPoints(table) // MUST BE CHANGED TO HELPER TABLE (?)\n\n  const centroids = getCentroids(k)\n  const copyOfInitialCentroids = getCopyOfCentroids(centroids)\n  // const centroids = getUniformCentroids(k)\n\n  var centroidsAreChanging = true\n\n  while(centroidsAreChanging) {\n    var prevCentroids = getCopyOfCentroids(centroids)\n    centroids.forEach((c) => {\n      c.cluster = []\n    })\n\n    // Assert each point to a cluster -> one of the centroids\n    points.forEach((point) => {\n      var closestCentroid = undefined\n      var distanceToClosestCentroid = Infinity\n      centroids.forEach((centroid) => {\n        const currentDistance = getEuclidianDistance(point, centroid)\n        if (currentDistance < distanceToClosestCentroid) {\n          closestCentroid = centroid\n          distanceToClosestCentroid = currentDistance\n        }\n      })\n      point.closestCentroid = closestCentroid\n      point.color = closestCentroid.id\n      closestCentroid.cluster.push(point)\n      changedNodesInOrder.push([point])\n    })\n  \n    // Assert new coordinates to the centroids\n    centroids.forEach((centroid) => {\n      // console.log('old')\n      // console.log(centroid)\n      const newCoordinates = getAverageOfCluster(centroid.cluster)\n      // console.log('new')\n      // console.log(newCoordinates)\n      if (!Number.isNaN(newCoordinates.rowIndex)) centroid.rowIndex = newCoordinates.rowIndex\n      if (!Number.isNaN(newCoordinates.colIndex)) centroid.colIndex = newCoordinates.colIndex\n      // console.log('')\n    })\n    changedNodesInOrder.push(centroids)\n\n    const areCentroidsEqual = compareCentroids(centroids, prevCentroids)\n    centroidsAreChanging = !areCentroidsEqual\n    changedNodesInOrder.push('iterate')\n    iterations += 1\n    if (iterations > 150) break // FAIL SAFE\n  }\n\n\n  // // TEMP VISUALIZING:\n  centroids.forEach((c) => {\n    var wasMarked = false\n    points.forEach((p) => { if (c.rowIndex === p.rowIndex && c.colIndex === p.colIndex) wasMarked = true })\n    const row = c.rowIndex\n    const col = c.colIndex\n    const point = table[row][col]\n    point.type = c.id\n    point.prevType = wasMarked ? 'marked' : ''\n    point.color = c.id\n  })\n\n  var variance = 0\n  centroids.forEach((c) => {\n    console.log(c)\n    c.cluster.forEach((point) => {\n      variance += getEuclidianDistance(c, point)\n    })\n  })\n\n  points.forEach((p) => {\n    table[p.rowIndex][p.colIndex].color = p.color\n  })\n\n  setIterations(iterations)\n  setVariance(Math.round(variance * 100) / 100)\n  setChangeHook(!changeHook)\n  setRunState('finished')\n  // visualize(changedNodesInOrder, table, points, copyOfInitialCentroids, speed, setIterations, setRunState, changeHook, setChangeHook)\n  // console.log('')\n}\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport Point from './point.js'\nimport ButtonGroup from '../buttonGroup/buttonGroup.js'\nimport getInitialPoints from './initialPoints.js'\nimport { KMeans } from '../../algorithms/kMeans.js'\nimport { getRandomInt, isInteger } from '../../algorithms/utils'\n\nconst speedLabelToSpeedMap = {\n  slow: 200,\n  medium: 1000,\n  fast: 60,\n  instant: 0\n}\nvar key = 0\nconst Table = () => {\n  const [table, setTable] = useState([])\n  const [runState, setRunState] = useState('empty') // empty | customized | running | finished\n  const [speed, setSpeed] = useState('instant') // medium\n  const [iterations, setIterations] = useState(0)\n  const [variance, setVariance] = useState(0)\n  const [changeHook, setChangeHook] = useState(false)\n\n  const hooks = {\n    runState,\n    setRunState\n  }\n\n  // basicly componentDidMount()\n  useEffect(() => {\n    const initialPoints = getInitialPoints()\n    setTable(initialPoints)\n  }, [])\n\n  const setTypeInPoint = (type, coordinates) => {\n    const row = coordinates[0]\n    const col = coordinates[1]\n    const point = table[row][col]\n    point.type = type\n    if (isInteger(type)) point.prevType = 'marked'\n  }\n\n  const resetPoints = useCallback(() => {\n    const initialPoints = getInitialPoints() // clears the grid\n    setTable(initialPoints)\n    setRunState('empty')\n  }, [])\n\n  const labelToAlgorithm = useMemo(() => {\n    return {\n      kMeans: KMeans\n    }\n  }, [])\n\n  const runAlgorithm = (currentAlgorithm, k=3) => {\n    const Algorithm = labelToAlgorithm[currentAlgorithm]\n    const currentSpeed = speedLabelToSpeedMap[speed]\n    setRunState('running')\n    Algorithm(k, table, currentSpeed, setRunState, setIterations, setVariance, changeHook, setChangeHook)\n  }\n\n  const resetAlgorithm = () => {\n    var isCustomized = false\n    table.map((row) => {\n      row.map((point) => {\n        const isOrWasMarked = point.type ==='marked' || point.prevType === 'marked'\n        point.type = isOrWasMarked ? 'marked' : 'normal'\n        point.color = ''\n        if (isOrWasMarked && !isCustomized) isCustomized = true\n      })\n    })\n    setRunState(isCustomized ? 'customized' : 'empty')\n  }\n\n  const generateRandomPoints = (numOfPoins=10) => {\n    const randomPoints = []\n    for (let i = 0; i < numOfPoins; i++) {\n       randomPoints.push({\n         rowIndex: getRandomInt(22),\n         colIndex: getRandomInt(40),\n       })\n    }\n    randomPoints.forEach((point) => setTypeInPoint('marked', [point.rowIndex, point.colIndex]))\n    setChangeHook(changeHook)\n  }\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <ButtonGroup runState={runState} runAlgorithm={runAlgorithm} setSpeed={setSpeed} resetPoints={resetPoints} resetAlgorithm={resetAlgorithm} generatePoints={generateRandomPoints} />\n      <div style={{border: `1px solid rgb(${[220,220,220]})`}}>\n        {table.map((row, rowIndex) => {\n          return <div key={rowIndex} style={{display: 'flex', flexDirection: 'row'}}>\n            {row.map((point, colIndex) =>\n              <Point\n                key={key++}\n                type={point.type}\n                color={point.color}\n                hooks={hooks}\n                setTypeInPoint={setTypeInPoint}\n                coordinates={[rowIndex, colIndex]}\n              />\n            )}\n          </div>\n        })}\n      </div>\n      <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n        <h1> Iterations: {iterations || '--'} </h1>\n        <h1> Variance: {variance || '--'} </h1>\n      </div>\n    </div>\n  )\n}\n\nexport default Table","import React from 'react';\nimport Header from './views/header.js'\nimport Table from './views/clustering/table'\n\nfunction App() {\n\n  const algorithmStyle = {\n    //textAlign: 'center',\n    display: 'table',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  }\n\n  return (\n    <>\n      <div style={algorithmStyle}>\n        <Header />\n        <Table />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}