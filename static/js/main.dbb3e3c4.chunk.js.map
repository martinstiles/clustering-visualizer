{"version":3,"sources":["views/header.js","algorithms/utils.js","views/clustering/point.js","views/buttonGroup/modal.js","views/buttonGroup/moreMenu.js","views/buttonGroup/buttonGroup.js","views/clustering/initialPoints.js","algorithms/kMeans.js","algorithms/dbscan.js","views/clustering/table.js","App.js","index.js"],"names":["Header","style","marginBottom","fontSize","color","isInteger","str","test","getRandomInt","max","Math","floor","random","getEuclidianDistance","u","v","sqrt","rowIndex","colIndex","getCopyOfCentroids","centroids","copyOfCentroids","forEach","centroid","push","id","compareCentroids","prevCentroids","isEqual","hasOneEqual","prevCentroid","getMarkedPoints","table","points","row","point","type","getAverageOfCluster","cluster","rowIndexSum","colIndexSum","length","typeToColorMap","marked","normal","unmarked","Point","props","useState","setType","runState","hooks","updateType","newType","setTypeInPoint","coordinates","height","width","border","backgroundColor","borderRadius","key","className","onMouseDown","setRunState","modal","display","alignItems","justifyContent","paper","textAlign","padding","TransitionsModal","visited","localStorage","getItem","open","setOpen","handleClose","setItem","Button","margin","onClick","Modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","fontStyle","flexDirection","marginLeft","marginRight","MoreMenu","anchorEl","setAnchorEl","handleMoreClose","marginTop","aria-haspopup","event","currentTarget","Menu","keepMounted","Boolean","MenuItem","Link","target","href","ButtonGroup","commonStyle","selectStyle","minWidth","selectKStyle","selectCentroidTypeStyle","isEmpty","isCustomized","isRunning","isFinished","algorithm","setAlgorithm","speed","setSpeed","k","setK","centroidType","setCentroidType","eps","setEps","minPts","setMinPts","FormControl","variant","InputLabel","Select","value","onChange","label","autoWidth","ariant","disabled","additionalInfo","runAlgorithm","resetPoints","resetAlgorithm","generatePoints","getInitialPoints","currentRow","col","prevType","KMeans","setIterations","setVariance","changeHook","setChangeHook","changedNodesInOrder","iterations","i","getCentroids","interval","numRows","currentSize","getUniformCentroids","centroidsAreChanging","c","closestCentroid","undefined","distanceToClosestCentroid","Infinity","currentDistance","newCoordinates","Number","isNaN","wasMarked","p","variance","round","isInACluster","clusters","currentCluster","point2","pointIsInList","neighboors","isNotInList","neighboor","DBSCAN","setNumClusters","getNeighboorsDBSCAN","neighboors2","neighboor2","expandCluster","potentialNeighboor","Table","setTable","numClusters","useEffect","initialPoints","useCallback","currentAlgorithm","currentSpeed","isOrWasMarked","numOfPoins","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbb3e3c4.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <div style={{marginBottom: '2em'}}>\n      <h1 style={{fontSize: '3.5em', color: `rgb(${[240,240,240]})`}}> Clustering Visualizer </h1>\n    </div>\n  )\n}\n\nexport default Header\n","export const isInteger = (str) => /^\\d+$/.test(str)\n\nexport const getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n// getRandomCentroids\nexport const getCentroids = (k) => {\n  const centroids = []\n  for(let i = 0; i < k; i++) {\n    centroids.push(\n      {\n        id: `${i}`,\n        rowIndex: getRandomInt(22),\n        colIndex: getRandomInt(40),\n        cluster: [],\n      }\n    )\n  }\n  return centroids\n}\n\nexport const getUniformCentroids = (k) => {\n  const numRows = 22\n  const numCols = 40\n  const tableSize = numRows * numCols\n  const interval = Math.floor(tableSize / (k + 1))\n\n  const centroids = []\n  for(let i = 0; i < k; i++) {\n    const currentSize = interval * (i + 1)\n    centroids.push(\n      {\n        id: `${i}`,\n        rowIndex: Math.floor(currentSize / numCols),\n        colIndex: Math.floor(currentSize / numRows),\n        cluster: [],\n      }\n    )\n  }\n  return centroids\n}\n\nexport const getEuclidianDistance = (u, v) => {\n  return Math.sqrt((u.rowIndex - v.rowIndex)**2 + (u.colIndex - v.colIndex)**2)\n}\n\nexport const getHelperTable = (table) => {\n  const helperNodes = []\n  table.map((row) => {\n    const helperRow = []\n    row.map((point) => {\n        helperRow.push(\n          {\n            type: point.type,\n            rowIndex: point.rowIndex,\n            colIndex: point.colIndex,\n            color: point.color,\n            closestCentroid: undefined,\n          }\n        )\n    })\n    helperNodes.push(helperRow)\n  })\n  return helperNodes\n}\n\nexport const getCopyOfCentroids = (centroids) => {\n  const copyOfCentroids = []\n  centroids.forEach((centroid) => {\n    copyOfCentroids.push({\n      rowIndex: centroid.rowIndex,\n      colIndex: centroid.colIndex,\n      id: centroid.id,\n    })\n  })\n  return copyOfCentroids\n}\n\n// Returns true if they are equal\nexport const compareCentroids = (centroids, prevCentroids) => {\n  var isEqual = true\n  centroids.forEach((centroid) => {\n    var hasOneEqual = false\n    prevCentroids.forEach((prevCentroid) => {\n      if (centroid.rowIndex === prevCentroid.rowIndex && centroid.colIndex === prevCentroid.colIndex){\n        hasOneEqual = true\n      }\n    })\n    if (!hasOneEqual) isEqual = false\n  })\n  return isEqual\n}\n\nexport const getMarkedPoints = (table) => {\n  const points = []\n  table.forEach((row) => {\n    row.forEach((point) => {\n      if (point.type === 'marked') points.push({rowIndex: point.rowIndex, colIndex: point.colIndex})\n    })\n  })\n  return points\n}\n\nexport const getAverageOfCluster = (cluster) => {\n  var rowIndexSum = 0\n  var colIndexSum = 0\n  cluster.forEach((point) => {rowIndexSum = rowIndexSum + point.rowIndex})\n  cluster.forEach((point) => {colIndexSum = colIndexSum + point.colIndex})\n  const rowIndex = Math.floor(rowIndexSum / cluster.length)\n  const colIndex = Math.floor(colIndexSum / cluster.length)\n  return {rowIndex, colIndex}\n}\n","import React, {useState} from 'react'\nimport { isInteger } from '../../algorithms/utils'\nimport './animations.css'\n\nconst typeToColorMap = {\n  marked: `rgb(${[220,220,220]})`,\n  normal: '',\n  unmarked: '',\n  centroid: '#cf2e2e',\n  '0': '#e3afbc', // pink\n  '1': '#3feee6', // blue\n  '2': '#cf2e2e', // red\n  '3': '#ffe400', // yellow\n  '4': '#e98074', // purple\n  '5': '#308580', // green\n  '6': '#daad86', // brown\n  '7': '#ff652f', // orange\n}\n\nconst Point = (props) => {\n  const [type, setType] = useState(props.type)\n  const runState = props.hooks.runState\n\n  const updateType = (newType) => {\n    setType(newType)\n    props.setTypeInPoint(newType, props.coordinates)\n  }\n\n  const style = {\n    height: '1.5em',\n    width: '1.5em',\n    border: `1px solid rgb(${[60,60,60]})`,\n    backgroundColor: typeToColorMap[props.color || type],\n    ...(isInteger(type) && {borderRadius: '50%'}) // if it is a number, aka centroid\n  }\n\n  const onMouseDown = () => {\n    if ( runState !== 'empty' && runState !== 'customized' ) return\n    if ( type === 'marked' ) {\n      updateType('unmarked')\n      return\n    }\n    updateType('marked')\n    props.hooks.setRunState('customized')\n  }\n\n  return (\n    <div key={props.key} className={type === 'marked' || isInteger(type) ? 'marked-point' : ''} style={style} onMouseDown={onMouseDown}/>\n  )\n}\n\nexport default Point","import React, {useState} from 'react'\nimport Modal from '@material-ui/core/Modal'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport Fade from '@material-ui/core/Fade'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { Button } from '@material-ui/core'\n\nconst modal = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}\nconst paper = {\n  backgroundColor: `rgb(${[40,40,40]})`,\n  border: `2px solid rgb(${[220,220,220]})`,\n  textAlign: 'left',\n  padding: '1em',\n}\n\nconst TransitionsModal = () => {\n\n  const visited = localStorage.getItem('visited')\n  const [open, setOpen] = useState(visited ? false : true)\n\n  const handleOpen = () => {\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n    localStorage.setItem('visited', true)\n  }\n\n  return (\n    <div>\n      <Button style={{fontSize: '0.9em', color: 'white', margin: 0 }} onClick={handleOpen}>\n        <HelpIcon style={{fontSize: '0.9em'}} />\n      </Button>\n      <Modal\n        style={modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div style={paper}>\n            <div style={{textAlign: 'center'}}>\n              <h2> Welcome to my Clustering Visualizer </h2>\n            </div>\n            <div style={{textAlign: 'center', fontStyle: 'italic'}}>\n              <h3> - Definitely under development - </h3>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between', marginLeft: '1em', marginRight: '1em'}}>\n              <div style={{display: 'flex', flexDirection: 'row'}}>\n                <p style={{color: '#e3afbc', fontStyle: 'italic'}}> Circle&nbsp; </p>\n                <p> - centroid of a cluster </p>\n              </div>\n              <div style={{display: 'flex', flexDirection: 'row'}}>\n                <p style={{color: '#e3afbc'}}> Square&nbsp; </p>\n                <p> - data point </p>\n              </div>\n              <div style={{display: 'flex', flexDirection: 'row'}}>\n                <p> A &nbsp;</p>\n                <p style={{color: '#e3afbc'}}> data points &nbsp; </p>\n                <p> with the same color as a &nbsp;</p>\n                <p style={{color: '#e3afbc'}}> centroid &nbsp; </p>\n                <p> belongs to it's cluster </p>\n              </div>\n            </div>\n            <p> 1. Click inside the grid to make points for the clustering algorithm </p>\n            <p> 2. Clicking the same cell twice will remove the point </p>\n            <p> 3. Select algorithm of choice (currently only one) </p>\n            <p> 4. Select a different speed if you feel like it (currently only instant) </p>\n            <p> 5. Hit play :)  </p>\n            <div style={{textAlign: 'center'}}>\n              <Button\n                style={{color: `rgb(${[20,20,20]})`, backgroundColor: `rgb(${[220,220,220]})`, fontSize: '0.9em'}}\n                onClick={handleClose}>\n                Let me play already\n              </Button>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n\nexport default TransitionsModal","import React, { useState } from 'react'\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline'\nimport { Button, MenuItem, Menu, Link } from '@material-ui/core'\n\nconst MoreMenu = () => {\n  const [anchorEl, setAnchorEl] = useState(null)\n  const handleMoreClose = () => { setAnchorEl(null) }\n  const handleMoreClick = (event) => { setAnchorEl(event.currentTarget) }\n\n  return (\n    <>\n      <Button style={{fontSize: '1em', color: 'white', margin: 0, marginTop: '6px'}} aria-haspopup=\"true\" onClick={handleMoreClick}>\n          <ViewHeadlineIcon style={{fontSize: '0.9em'}} />\n        </Button>\n        <Menu anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleMoreClose}>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://martinstiles.github.io/pathfinding-visualizer/' style={{color: 'black'}}>\n            Pathfinding Algorithms\n          </Link></MenuItem>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://github.com/martinstiles/clustering-visualizer' style={{color: 'black'}}>\n            Go to repository\n          </Link></MenuItem>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://martinstiles.github.io/website/' style={{color: 'black'}}>\n            Visit my website\n          </Link></MenuItem>\n          <MenuItem onClick={handleMoreClose}> <Link target='_blank' href='https://www.youtube.com/watch?v=dQw4w9WgXcQ' style={{color: 'black'}}>\n            Free stuff\n          </Link></MenuItem>\n        </Menu>\n    </>\n  )\n}\n\nexport default MoreMenu\n","import React, { useState } from 'react'\nimport { Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport ReplayIcon from '@material-ui/icons/Replay'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport TransitionModal from './modal.js'\nimport MoreMenu from './moreMenu.js'\n\nconst ButtonGroup = (props) => {\n  const style = {\n    marginBottom: '2em',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n\n  const commonStyle = {\n    backgroundColor: '#FFE19C',\n    textAlign: 'left'\n  }\n  const selectStyle = {\n    ...commonStyle,\n    minWidth: '10em',\n  }\n  const selectKStyle = {\n    ...commonStyle,\n    minWidth: '5em',\n  }\n  const selectCentroidTypeStyle = {\n    ...commonStyle,\n    minWidth: '9em',\n  }\n\n  // run states:\n  const isEmpty = props.runState === 'empty'\n  const isCustomized = props.runState === 'customized'\n  const isRunning = props.runState === 'running'\n  const isFinished = props.runState === 'finished'\n\n  // ALGORITHM SELECT\n  const [algorithm, setAlgorithm] = useState('')\n  const handleAlgorithmChange = (event) => {\n    setAlgorithm(event.target.value)\n    props.setAlgorithm(event.target.value)\n  }\n\n  // SPEED SELECT\n  const [speed, setSpeed] = useState('instant') // medium\n  const handleSpeedChange = (event) => {\n    setSpeed(event.target.value)\n    props.setSpeed(event.target.value)\n  }\n\n  // PLAY BUTTON\n  const handlePlayClick = () => {\n    let additionalInfo = {}\n    if (algorithm === 'kMeans') {\n      additionalInfo = {k, centroidType}\n    } else if (algorithm === 'dbscan') {\n      additionalInfo = {eps, minPts}\n    }\n    props.runAlgorithm(algorithm, additionalInfo)\n  }\n\n  // Select K for KMeans\n  const [k, setK] = useState(3)\n  const handleKChange = (event) => {\n    setK(event.target.value)\n  }\n\n  // Select random or deterministic centroid generation for KMeans\n  const [centroidType, setCentroidType] = useState('random')\n  const handleCentroidTypeChange = (event) => {\n    setCentroidType(event.target.value)\n  }\n\n  // Select epsilon for DBSCAN\n  const [eps, setEps] = useState(5)\n  const handleEpsChange = (event) => {\n    setEps(event.target.value)\n  }\n\n  // Select min pts for DBSCAN\n  const [minPts, setMinPts] = useState(3)\n  const handleMinPtsChange = (event) => {\n    setMinPts(event.target.value)\n  }\n\n  // <MenuItem value={'slow'}>Slow</MenuItem>\n  //         <MenuItem value={'medium'}>Medium</MenuItem>\n  //         <MenuItem value={'fast'}>Fast</MenuItem>\n\n  // TODO: Clean this up --> Make generic component for FormControl\n  return (\n    <div style={style}>\n      <div style={{display: 'flex', flexDirection: 'row'}}>\n      <FormControl variant=\"filled\">\n        <InputLabel>\n          <div style={{color: 'black', fontStyle: 'italic'}}>Select algorithm</div>\n        </InputLabel>\n        <Select style={selectStyle} value={algorithm} onChange={handleAlgorithmChange} label=\"Algorithm\" autoWidth={true}>\n          <MenuItem value={'kMeans'}>K-Means</MenuItem>\n          <MenuItem value={'dbscan'}>DBSCAN</MenuItem>\n        </Select>\n      </FormControl>\n\n      { algorithm === 'kMeans' &&\n      <>\n        <FormControl variant=\"filled\" style={{marginLeft: '1em'}}>\n          <InputLabel>\n            <div style={{color: 'black', fontStyle: 'italic'}}>Select K</div>\n          </InputLabel>\n          <Select style={selectKStyle} value={k} onChange={handleKChange} label=\"Algorithm\" autoWidth={true}>\n            <MenuItem value={1}>1</MenuItem>\n            <MenuItem value={2}>2</MenuItem>\n            <MenuItem value={3}>3</MenuItem>\n            <MenuItem value={4}>4</MenuItem>\n            <MenuItem value={5}>5</MenuItem>\n            <MenuItem value={6}>6</MenuItem>\n            <MenuItem value={7}>7</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" style={{marginLeft: '1em'}}>\n          <InputLabel>\n            <div style={{color: 'black', fontStyle: 'italic'}}>Centroid type</div>\n          </InputLabel>\n          <Select style={selectCentroidTypeStyle} value={centroidType} onChange={handleCentroidTypeChange} label=\"Algorithm\" autoWidth={true}>\n            <MenuItem value={'random'}>Random</MenuItem>\n            <MenuItem value={'deterministic'}>Deterministic</MenuItem>\n          </Select>\n        </FormControl>\n      </>\n      }\n\n      { algorithm === 'dbscan' &&\n      <>\n        <FormControl variant=\"filled\" style={{marginLeft: '1em'}}>\n          <InputLabel>\n            <div style={{color: 'black', fontStyle: 'italic'}}>Epsilon</div>\n          </InputLabel>\n          <Select style={selectKStyle} value={eps} onChange={handleEpsChange} label=\"Epsilon\" autoWidth={true}>\n            <MenuItem value={1}>1</MenuItem>\n            <MenuItem value={3}>3</MenuItem>\n            <MenuItem value={5}>5</MenuItem>\n            <MenuItem value={7}>7</MenuItem>\n            <MenuItem value={9}>9</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" style={{marginLeft: '1em'}}>\n          <InputLabel>\n            <div style={{color: 'black', fontStyle: 'italic'}}>Min Pts</div>\n          </InputLabel>\n          <Select style={selectKStyle} value={minPts} onChange={handleMinPtsChange} label=\"MinPts\" autoWidth={true}>\n            <MenuItem value={1}>1</MenuItem>\n            <MenuItem value={3}>3</MenuItem>\n            <MenuItem value={5}>5</MenuItem>\n            <MenuItem value={7}>7</MenuItem>\n            <MenuItem value={9}>9</MenuItem>\n          </Select>\n        </FormControl>\n      </>\n      }\n\n      <FormControl variant=\"filled\" style={{marginLeft: '2em'}}>\n        <InputLabel>\n          <div style={{color: 'black', fontStyle: 'italic'}}>Speed</div>\n        </InputLabel>\n        <Select style={selectStyle} value={speed} onChange={handleSpeedChange} label=\"Speed\" autoWidth={true}>\n          <MenuItem value={'instant'}>Instant</MenuItem>\n        </Select>\n      </FormControl>\n\n      <Button\n        style={{marginLeft: '2em', color: 'black', backgroundColor: algorithm === '' || isRunning || isFinished ? 'gray' : '#63C132'}} \n        ariant=\"contained\"\n        disabled={algorithm === '' || isRunning || isFinished}\n        onClick={handlePlayClick}\n      >\n        <PlayArrowIcon />\n      </Button>\n\n      <Button\n        style={{marginLeft: '1em', color: 'black', backgroundColor: isEmpty || isRunning ? 'gray' : '#cf2e2e'}}\n        variant=\"contained\"\n        disabled={isEmpty || isRunning}\n        onClick={isCustomized ? props.resetPoints : props.resetAlgorithm}\n      >\n        { isEmpty || isCustomized ? <HighlightOffIcon /> : <ReplayIcon /> }\n      </Button>\n      </div>\n\n      <Button\n        style={{marginLeft: '1em', color: 'black', backgroundColor: !isEmpty && !isCustomized ? 'gray' : '#e3afbc'}} // true -> !isEmpty\n        variant=\"contained\"\n        disabled={!isEmpty && !isCustomized} // true -> !isEmpty\n        onClick={() => props.generatePoints(10)}\n      >\n        { 'Generate'}\n      </Button>\n\n      <div style={{display: 'flex', flexDirection: 'row', fontSize: '2.65em'}}>\n        <TransitionModal />\n        <MoreMenu />\n      </div>\n    </div>\n  )\n}\n\n\n//<MenuItem value={'aStar'}>A*</MenuItem>\n//<MenuItem value={'bestFist'}>Best first (greedy)</MenuItem>\n//<MenuItem value={'breadthFirst'}>Breadth First</MenuItem>\n\nexport default ButtonGroup","const getInitialPoints = () => {\n  const numRows = 22 // 18\n  const numCols = 40 // 34\n  const points = []\n  // Initialize the points\n  for (let row = 0; row < numRows; row++) {\n    const currentRow = []\n    for (let col = 0; col < numCols; col++) {\n      currentRow.push(\n        { type: 'normal',\n          rowIndex: row,\n          colIndex: col,\n          color: '',\n          prevType: ''\n          // closestCentroid: undefined,\n        }\n      )\n    }\n    points.push(currentRow)\n  }\n  return points\n}\n\nexport default getInitialPoints","import { getCentroids, getMarkedPoints, getUniformCentroids, getEuclidianDistance, getAverageOfCluster, getCopyOfCentroids, compareCentroids } from './utils.js'\nimport { visualize } from './visualize'\n\nexport const KMeans = (k, centroidType, table, speed, setRunState, setIterations, setVariance, changeHook, setChangeHook) => {\n  // ChangedNodesInOrder contains every update to visualize\n  // For elem in changedNodesInOrder:\n  // 1. [{id: \"0\", rowIndex: 19, colIndex: 9, cluster: Array(0)}, {...}] --> Update all centroids and remove previous ones --> if elem.length > 1\n  // 2. [{rowIndex: 2, colIndex: 4, closestCentroid: {…}, color: \"0\"}] --> const point = table[rowIndex][colIndex] --> \n  // 3. 'iterate' --> add iteration --> elem === 'iterate'\n  // 4. \n  const changedNodesInOrder = []\n  // const helperTable = getHelperTable(table)\n  var iterations = 0\n\n  const points = getMarkedPoints(table) // MUST BE CHANGED TO HELPER TABLE (?)\n\n  const centroids = centroidType === 'random' ? getCentroids(k) : getUniformCentroids(k)\n  // const copyOfInitialCentroids = getCopyOfCentroids(centroids)\n\n  var centroidsAreChanging = true\n\n  while(centroidsAreChanging) {\n    var prevCentroids = getCopyOfCentroids(centroids)\n    centroids.forEach((c) => {\n      c.cluster = []\n    })\n\n    // Assert each point to a cluster -> one of the centroids\n    points.forEach((point) => {\n      var closestCentroid = undefined\n      var distanceToClosestCentroid = Infinity\n      centroids.forEach((centroid) => {\n        const currentDistance = getEuclidianDistance(point, centroid)\n        if (currentDistance < distanceToClosestCentroid) {\n          closestCentroid = centroid\n          distanceToClosestCentroid = currentDistance\n        }\n      })\n      point.closestCentroid = closestCentroid\n      point.color = closestCentroid.id\n      closestCentroid.cluster.push(point)\n      changedNodesInOrder.push([point])\n    })\n  \n    // Assert new coordinates to the centroids\n    centroids.forEach((centroid) => {\n      const newCoordinates = getAverageOfCluster(centroid.cluster)\n      if (!Number.isNaN(newCoordinates.rowIndex)) centroid.rowIndex = newCoordinates.rowIndex\n      if (!Number.isNaN(newCoordinates.colIndex)) centroid.colIndex = newCoordinates.colIndex\n    })\n    changedNodesInOrder.push(centroids)\n\n    const areCentroidsEqual = compareCentroids(centroids, prevCentroids)\n    centroidsAreChanging = !areCentroidsEqual\n    changedNodesInOrder.push('iterate')\n    iterations += 1\n    if (iterations > 150) break // FAIL SAFE\n  }\n\n\n  // // TEMP VISUALIZING:\n  centroids.forEach((c) => {\n    var wasMarked = false\n    points.forEach((p) => { if (c.rowIndex === p.rowIndex && c.colIndex === p.colIndex) wasMarked = true })\n    const row = c.rowIndex\n    const col = c.colIndex\n    const point = table[row][col]\n    point.type = c.id\n    point.prevType = wasMarked ? 'marked' : ''\n    point.color = c.id\n  })\n\n  var variance = 0\n  centroids.forEach((c) => {\n    // console.log(c)\n    c.cluster.forEach((point) => {\n      variance += getEuclidianDistance(c, point)\n    })\n  })\n\n  points.forEach((p) => {\n    table[p.rowIndex][p.colIndex].color = p.color\n  })\n\n  setIterations(iterations)\n  setVariance(Math.round(variance * 100) / 100)\n  setChangeHook(!changeHook)\n  setRunState('finished')\n  // visualize(changedNodesInOrder, table, points, copyOfInitialCentroids, speed, setIterations, setRunState, changeHook, setChangeHook)\n  // console.log('')\n}\n","import { getMarkedPoints, getEuclidianDistance } from './utils.js'\n// import { visualize } from './visualize'\n\nconst isInACluster = (point, clusters, currentCluster) => {\n  var isInACluster\n  clusters.forEach((cluster) => {\n    cluster.forEach((point2) => {\n      if (point.rowIndex === point2.rowIndex && point.colIndex === point2.colIndex) isInACluster = true\n    })\n  })\n  currentCluster.forEach((point2) => {\n    if (point.rowIndex === point2.rowIndex && point.colIndex === point2.colIndex) isInACluster = true\n  })\n  return isInACluster\n}\n\nconst pointIsInList = (point, neighboors) => {\n  var isNotInList = false\n  neighboors.forEach((neighboor) => {\n    if (point.rowIndex === neighboor.rowIndex && point.colIndex === neighboor.colIndex) isNotInList = true\n  })\n  return isNotInList\n}\n\nconst expandCluster = (point, points, neighboors, cluster, clusters, eps, minPts) => {\n  for (let i = 0; i < neighboors.length; i++) {\n    const point2 = neighboors[i]\n    if (point2 !== 'visited' && point2 !== 'noise') {\n      point2.type = 'visited'\n      const neighboors2 = getNeighboorsDBSCAN(point2, points, eps)\n      if (neighboors2.length >= minPts) {\n        neighboors2.forEach((neighboor2) => {\n          if (!pointIsInList(neighboor2, neighboors)) neighboors.push(neighboor2)\n        })\n      }\n    }\n    if (!isInACluster(point2, clusters, cluster)) {\n      cluster.push(point2)\n    }\n  }\n}\n\nexport const DBSCAN = (eps, minPts, table, speed, setRunState, setNumClusters, changeHook, setChangeHook) => {\n\n  const points = getMarkedPoints(table)\n\n  //const cluster = undefined\n  const clusters = []\n\n  // marked points => unvisited points\n  points.forEach((point) => {\n    if (point.type !== 'visited' && point.type !== 'noise') {\n      point.type = 'visited'\n      const neighboors = getNeighboorsDBSCAN(point, points, eps)\n      if (neighboors.length < minPts) point.type = 'noise'\n      else {\n        const cluster = []\n        expandCluster(point, points, neighboors, cluster, clusters, eps, minPts)\n        clusters.push(cluster)\n      }\n    }\n  })\n\n  var c = 0\n  clusters.forEach((cluster) => {\n    cluster.forEach((point) => {\n      table[point.rowIndex][point.colIndex].color = `${c}`\n    })\n    c++\n  })\n\n  setNumClusters(clusters.length)\n  setChangeHook(!changeHook)\n  setRunState('finished')\n}\n\nconst getNeighboorsDBSCAN = (point, points, eps) => {\n  const neighboors = []\n  points.forEach((potentialNeighboor) => {\n    const distance = getEuclidianDistance(point, potentialNeighboor)\n    if (distance <= eps) {\n      neighboors.push(potentialNeighboor)\n    }\n  })\n  return neighboors\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport Point from './point.js'\nimport ButtonGroup from '../buttonGroup/buttonGroup.js'\nimport getInitialPoints from './initialPoints.js'\nimport { KMeans } from '../../algorithms/kMeans.js'\nimport { DBSCAN } from '../../algorithms/dbscan'\nimport { getRandomInt } from '../../algorithms/utils'\n\nconst speedLabelToSpeedMap = {\n  slow: 200,\n  medium: 1000,\n  fast: 60,\n  instant: 0\n}\n\nvar key = 0\n\nconst Table = () => {\n  const [table, setTable] = useState([])\n  const [runState, setRunState] = useState('empty') // empty | customized | running | finished\n  const [speed, setSpeed] = useState('instant') // medium\n  const [iterations, setIterations] = useState(0)\n  const [variance, setVariance] = useState(0)\n  const [changeHook, setChangeHook] = useState(false)\n  const [algorithm, setAlgorithm] = useState('')\n  const [numClusters, setNumClusters] = useState(0)\n\n  const hooks = {\n    runState,\n    setRunState\n  }\n\n  // basicly componentDidMount()\n  useEffect(() => {\n    const initialPoints = getInitialPoints()\n    setTable(initialPoints)\n  }, [])\n\n  const setTypeInPoint = (type, coordinates) => {\n    const row = coordinates[0]\n    const col = coordinates[1]\n    const point = table[row][col]\n    point.type = type\n  }\n\n  const resetPoints = useCallback(() => {\n    const initialPoints = getInitialPoints() // clears the grid\n    setTable(initialPoints)\n    setRunState('empty')\n  }, [])\n\n  const runAlgorithm = (currentAlgorithm, additionalInfo={}) => {\n    const currentSpeed = speedLabelToSpeedMap[speed]\n    setRunState('running')\n    if (currentAlgorithm === 'kMeans') {\n      const k = additionalInfo.k\n      const type = additionalInfo.centroidType\n      KMeans(k, type, table, currentSpeed, setRunState, setIterations, setVariance, changeHook, setChangeHook)\n    }\n    if (currentAlgorithm === 'dbscan') {\n      const eps = additionalInfo.eps\n      const minPts = additionalInfo.minPts\n      DBSCAN(eps, minPts, table, currentSpeed, setRunState, setNumClusters, changeHook, setChangeHook)\n    }\n  }\n\n  const resetAlgorithm = () => {\n    var isCustomized = false\n    table.forEach((row) => {\n      row.forEach((point) => {\n        const isOrWasMarked = point.type ==='marked' || point.prevType === 'marked'\n        point.type = isOrWasMarked ? 'marked' : 'normal'\n        point.color = ''\n        if (isOrWasMarked && !isCustomized) isCustomized = true\n      })\n    })\n    setRunState(isCustomized ? 'customized' : 'empty')\n  }\n\n  const generateRandomPoints = (numOfPoins=10) => {\n    for (let i = 0; i < numOfPoins; i++) {\n      const rowIndex = getRandomInt(22)\n      const colIndex = getRandomInt(40)\n      setTypeInPoint('marked', [rowIndex, colIndex])\n    }\n    setRunState('customized')\n    setChangeHook(!changeHook)\n  }\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <ButtonGroup runState={runState} runAlgorithm={runAlgorithm} setSpeed={setSpeed} resetPoints={resetPoints} resetAlgorithm={resetAlgorithm} generatePoints={generateRandomPoints} setAlgorithm={setAlgorithm} />\n      <div style={{border: `1px solid rgb(${[220,220,220]})`}}>\n        {table.map((row, rowIndex) => {\n          return <div key={rowIndex} style={{display: 'flex', flexDirection: 'row'}}>\n            {row.map((point, colIndex) =>\n              <Point\n                key={key++}\n                type={point.type}\n                color={point.color}\n                hooks={hooks}\n                setTypeInPoint={setTypeInPoint}\n                coordinates={[rowIndex, colIndex]}\n              />\n            )}\n          </div>\n        })}\n      </div>\n      { \n        algorithm === 'kMeans'\n        &&\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n          <h1> Iterations: {iterations || '--'} </h1>\n          <h1> Variance: {variance || '--'} </h1>\n        </div>\n      }\n      {\n        algorithm === 'dbscan'\n        &&\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n          <h1> Clusters found: {numClusters || '--'} </h1>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Table","import React from 'react';\nimport Header from './views/header.js'\nimport Table from './views/clustering/table'\n\nfunction App() {\n\n  const algorithmStyle = {\n    //textAlign: 'center',\n    display: 'table',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  }\n\n  return (\n    <>\n      <div style={algorithmStyle}>\n        <Header />\n        <Table />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}